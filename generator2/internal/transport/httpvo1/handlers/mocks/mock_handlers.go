// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	multipart "mime/multipart"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSrv is a mock of Srv interface.
type MockSrv struct {
	ctrl     *gomock.Controller
	recorder *MockSrvMockRecorder
}

// MockSrvMockRecorder is the mock recorder for MockSrv.
type MockSrvMockRecorder struct {
	mock *MockSrv
}

// NewMockSrv creates a new mock instance.
func NewMockSrv(ctrl *gomock.Controller) *MockSrv {
	mock := &MockSrv{ctrl: ctrl}
	mock.recorder = &MockSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSrv) EXPECT() *MockSrvMockRecorder {
	return m.recorder
}

// DeleteTemplate mocks base method.
func (m *MockSrv) DeleteTemplate(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockSrvMockRecorder) DeleteTemplate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockSrv)(nil).DeleteTemplate), ctx, id)
}

// GenerateTemplate mocks base method.
func (m *MockSrv) GenerateTemplate(ctx context.Context, id int) (*os.File, func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTemplate", ctx, id)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(func())
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateTemplate indicates an expected call of GenerateTemplate.
func (mr *MockSrvMockRecorder) GenerateTemplate(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTemplate", reflect.TypeOf((*MockSrv)(nil).GenerateTemplate), ctx, id)
}

// UploadTemplate mocks base method.
func (m *MockSrv) UploadTemplate(ctx context.Context, id int, file multipart.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadTemplate", ctx, id, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadTemplate indicates an expected call of UploadTemplate.
func (mr *MockSrvMockRecorder) UploadTemplate(ctx, id, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadTemplate", reflect.TypeOf((*MockSrv)(nil).UploadTemplate), ctx, id, file)
}
