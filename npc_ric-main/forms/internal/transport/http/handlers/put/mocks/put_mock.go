// Code generated by MockGen. DO NOT EDIT.
// Source: put.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPutter is a mock of Putter interface.
type MockPutter struct {
	ctrl     *gomock.Controller
	recorder *MockPutterMockRecorder
}

// MockPutterMockRecorder is the mock recorder for MockPutter.
type MockPutterMockRecorder struct {
	mock *MockPutter
}

// NewMockPutter creates a new mock instance.
func NewMockPutter(ctrl *gomock.Controller) *MockPutter {
	mock := &MockPutter{ctrl: ctrl}
	mock.recorder = &MockPutterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPutter) EXPECT() *MockPutterMockRecorder {
	return m.recorder
}

// PutInstitutionColumns mocks base method.
func (m *MockPutter) PutInstitutionColumns(ctx context.Context, id int, columns []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstitutionColumns", ctx, id, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInstitutionColumns indicates an expected call of PutInstitutionColumns.
func (mr *MockPutterMockRecorder) PutInstitutionColumns(ctx, id, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstitutionColumns", reflect.TypeOf((*MockPutter)(nil).PutInstitutionColumns), ctx, id, columns)
}

// PutInstitutionInfo mocks base method.
func (m *MockPutter) PutInstitutionInfo(ctx context.Context, id int, name string, inn int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstitutionInfo", ctx, id, name, inn)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInstitutionInfo indicates an expected call of PutInstitutionInfo.
func (mr *MockPutterMockRecorder) PutInstitutionInfo(ctx, id, name, inn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstitutionInfo", reflect.TypeOf((*MockPutter)(nil).PutInstitutionInfo), ctx, id, name, inn)
}

// PutMentor mocks base method.
func (m *MockPutter) PutMentor(ctx context.Context, id int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMentor", ctx, id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMentor indicates an expected call of PutMentor.
func (mr *MockPutterMockRecorder) PutMentor(ctx, id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMentor", reflect.TypeOf((*MockPutter)(nil).PutMentor), ctx, id, name)
}
