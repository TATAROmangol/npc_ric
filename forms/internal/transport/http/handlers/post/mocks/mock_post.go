// Code generated by MockGen. DO NOT EDIT.
// Source: post.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPoster is a mock of Poster interface.
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster.
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance.
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// PostForm mocks base method.
func (m *MockPoster) PostForm(ctx context.Context, info []string, institutionId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", ctx, info, institutionId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockPosterMockRecorder) PostForm(ctx, info, institutionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockPoster)(nil).PostForm), ctx, info, institutionId)
}

// PostInstitution mocks base method.
func (m *MockPoster) PostInstitution(ctx context.Context, name string, inn int, columns []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostInstitution", ctx, name, inn, columns)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostInstitution indicates an expected call of PostInstitution.
func (mr *MockPosterMockRecorder) PostInstitution(ctx, name, inn, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostInstitution", reflect.TypeOf((*MockPoster)(nil).PostInstitution), ctx, name, inn, columns)
}

// PostMentor mocks base method.
func (m *MockPoster) PostMentor(ctx context.Context, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMentor", ctx, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMentor indicates an expected call of PostMentor.
func (mr *MockPosterMockRecorder) PostMentor(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMentor", reflect.TypeOf((*MockPoster)(nil).PostMentor), ctx, name)
}
