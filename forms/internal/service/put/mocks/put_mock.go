// Code generated by MockGen. DO NOT EDIT.
// Source: put.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPutRepo is a mock of PutRepo interface.
type MockPutRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPutRepoMockRecorder
}

// MockPutRepoMockRecorder is the mock recorder for MockPutRepo.
type MockPutRepoMockRecorder struct {
	mock *MockPutRepo
}

// NewMockPutRepo creates a new mock instance.
func NewMockPutRepo(ctrl *gomock.Controller) *MockPutRepo {
	mock := &MockPutRepo{ctrl: ctrl}
	mock.recorder = &MockPutRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPutRepo) EXPECT() *MockPutRepoMockRecorder {
	return m.recorder
}

// PutInstitutionColumns mocks base method.
func (m *MockPutRepo) PutInstitutionColumns(ctx context.Context, id int, columns []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstitutionColumns", ctx, id, columns)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInstitutionColumns indicates an expected call of PutInstitutionColumns.
func (mr *MockPutRepoMockRecorder) PutInstitutionColumns(ctx, id, columns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstitutionColumns", reflect.TypeOf((*MockPutRepo)(nil).PutInstitutionColumns), ctx, id, columns)
}

// PutInstitutionInfo mocks base method.
func (m *MockPutRepo) PutInstitutionInfo(ctx context.Context, id int, name string, inn int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutInstitutionInfo", ctx, id, name, inn)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutInstitutionInfo indicates an expected call of PutInstitutionInfo.
func (mr *MockPutRepoMockRecorder) PutInstitutionInfo(ctx, id, name, inn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutInstitutionInfo", reflect.TypeOf((*MockPutRepo)(nil).PutInstitutionInfo), ctx, id, name, inn)
}

// PutMentor mocks base method.
func (m *MockPutRepo) PutMentor(ctx context.Context, id int, info string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMentor", ctx, id, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMentor indicates an expected call of PutMentor.
func (mr *MockPutRepoMockRecorder) PutMentor(ctx, id, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMentor", reflect.TypeOf((*MockPutRepo)(nil).PutMentor), ctx, id, info)
}
