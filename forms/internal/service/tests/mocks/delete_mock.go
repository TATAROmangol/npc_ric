// Code generated by MockGen. DO NOT EDIT.
// Source: delete.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDeleteRepo is a mock of DeleteRepo interface.
type MockDeleteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteRepoMockRecorder
}

// MockDeleteRepoMockRecorder is the mock recorder for MockDeleteRepo.
type MockDeleteRepoMockRecorder struct {
	mock *MockDeleteRepo
}

// NewMockDeleteRepo creates a new mock instance.
func NewMockDeleteRepo(ctrl *gomock.Controller) *MockDeleteRepo {
	mock := &MockDeleteRepo{ctrl: ctrl}
	mock.recorder = &MockDeleteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteRepo) EXPECT() *MockDeleteRepoMockRecorder {
	return m.recorder
}

// DeleteInstitution mocks base method.
func (m *MockDeleteRepo) DeleteInstitution(ctx context.Context, institutionId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstitution", ctx, institutionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstitution indicates an expected call of DeleteInstitution.
func (mr *MockDeleteRepoMockRecorder) DeleteInstitution(ctx, institutionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstitution", reflect.TypeOf((*MockDeleteRepo)(nil).DeleteInstitution), ctx, institutionId)
}

// DeleteMentor mocks base method.
func (m *MockDeleteRepo) DeleteMentor(ctx context.Context, mentorId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMentor", ctx, mentorId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMentor indicates an expected call of DeleteMentor.
func (mr *MockDeleteRepoMockRecorder) DeleteMentor(ctx, mentorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMentor", reflect.TypeOf((*MockDeleteRepo)(nil).DeleteMentor), ctx, mentorId)
}
