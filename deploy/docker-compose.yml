services:
  nginx:
    image: nginx
    container_name: nginx
    depends_on:
      auth: 
        condition: service_started
      forms:
        condition: service_started
      generator:
        condition: service_started
      # generator-go:
      #   condition: service_started
    environment:
      AUTH_HTTP_PORT: ${AUTH_HTTP_PORT}
      AUTH_GRPC_PORT: ${AUTH_GRPC_PORT}
      FORMS_HTTP_PORT: ${FORMS_HTTP_PORT}
      FORMS_TABLE_GRPC_PORT: ${FORMS_TABLE_GRPC_PORT}
      GEN_HTTP_PORT: ${GEN_HTTP_PORT}
      NGINX_HTTP_PORT: ${NGINX_HTTP_PORT}
      NGINX_HTTP_HOST: ${NGINX_HTTP_HOST}
      NGINX_GRPC_AUTH_PORT: ${NGINX_GRPC_AUTH_PORT}
      NGINX_GRPC_FORMS_PORT: ${NGINX_GRPC_FORMS_PORT}
    expose:
      - ${NGINX_HTTP_PORT}
      - ${NGINX_GRPC_AUTH_PORT}
      - ${NGINX_GRPC_FORMS_PORT}
    volumes:
      - ../nginx/templates:/etc/nginx/templates:ro
      - ../nginx/video:/etc/nginx/video
      - ../nginx/certs:/etc/nginx/certs:ro
    ports:
      - ${NGINX_HTTP_PORT}:${NGINX_HTTP_PORT}
      - ${NGINX_GRPC_AUTH_PORT}:${NGINX_GRPC_AUTH_PORT}
      - ${NGINX_GRPC_FORMS_PORT}:${NGINX_GRPC_FORMS_PORT}

  auth:
    container_name: auth
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ../auth
      dockerfile: Dockerfile
    environment:
      AUTH_HTTP_PORT: ${AUTH_HTTP_PORT}
      AUTH_HTTP_HOST: ${AUTH_HTTP_HOST}
      AUTH_GRPC_PORT: ${AUTH_GRPC_PORT}
      AUTH_GRPC_HOST: ${AUTH_GRPC_HOST}
      ADMIN_LOGIN: ${ADMIN_LOGIN}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      JWT_KEY: ${JWT_KEY}
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_HOST: kafka
      KAFKA_LOG_TOPIC: ${KAFKA_LOG_TOPIC}
      AUTH_COOKIE_NAME: ${AUTH_COOKIE_NAME}
    expose:
      - ${AUTH_HTTP_PORT}
      - ${AUTH_GRPC_PORT}

  forms:
    container_name: forms
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ../forms
      dockerfile: Dockerfile
    environment:
      FORMS_HTTP_PORT: ${FORMS_HTTP_PORT}
      FORMS_HTTP_HOST: ${FORMS_HTTP_HOST}
      FORMS_TABLE_GRPC_PORT: ${FORMS_TABLE_GRPC_PORT}
      FORMS_TABLE_GRPC_HOST: ${FORMS_TABLE_GRPC_HOST}
      FORMS_AUTH_GRPC_PORT: ${NGINX_GRPC_AUTH_PORT}
      FORMS_AUTH_GRPC_HOST: nginx
      PG_HOST: postgres
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_SSL: ${PG_SSL}
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_HOST: kafka
      KAFKA_LOG_TOPIC: ${KAFKA_LOG_TOPIC}
      AUTH_COOKIE_NAME: ${AUTH_COOKIE_NAME}
    expose:
      - ${FORMS_HTTP_PORT}
      - ${FORMS_TABLE_GRPC_PORT}

  generator:
    container_name: generator
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ../generator
      dockerfile: Dockerfile
    environment:
      FORMS_GRPC_HOST: nginx
      FORMS_GRPC_PORT: ${NGINX_GRPC_FORMS_PORT}
      GEN_HTTP_PORT: ${GEN_HTTP_PORT}
      GEN_HTTP_HOST: ${GEN_HTTP_HOST}
      PG_HOST: postgres
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}
      PG_SSL: ${PG_SSL}
      AUTH_COOKIE_NAME: ${AUTH_COOKIE_NAME}
    expose:
      - ${GEN_HTTP_PORT}

  stats:
    container_name: stats
    build:
      context: ../stats
      dockerfile: Dockerfile
    environment:
      KAFKA_PORT: ${KAFKA_PORT}
      KAFKA_HOST: kafka
      KAFKA_LOG_TOPIC: ${KAFKA_LOG_TOPIC}
    depends_on:
      - kafka
    
  # generator-go:
  #   container_name: generator-go
  #   depends_on:
  #     mongodb:
  #       condition: service_started
  #     kafka:
  #       condition: service_started
  #   build:
  #     context: ../generator2
  #     dockerfile: Dockerfile
  #   environment:
  #     GENERATOR_HTTP_HOST: ${GEN_HTTP_HOST}
  #     GENERATOR_HTTP_PORT: ${GEN_HTTP_PORT}
  #     GENERATOR_TABLE_GRPC_HOST: nginx
  #     GENERATOR_TABLE_GRPC_PORT: ${NGINX_GRPC_FORMS_PORT}
  #     GENERATOR_AUTH_GRPC_HOST: nginx
  #     GENERATOR_AUTH_GRPC_PORT: ${NGINX_GRPC_AUTH_PORT}
  #     MONGO_HOST: mongodb
  #     MONGO_PORT: ${MONGO_PORT}
  #     MONGO_USER: ${MONGO_USER}
  #     MONGO_PASSWORD: ${MONGO_PASSWORD}
  #     MONGO_DB_NAME: ${MONGO_DB_NAME}
  #     MONGO_COLLECTION_NAME: ${MONGO_COLLECTION_NAME}
  #     MONGO_AUTH_SOURCE: ${MONGO_AUTH_SOURCE}
  #     AUTH_COOKIE_NAME: ${AUTH_COOKIE_NAME}
  #     DOCX_LICENSE_KEY: ${DOCX_LICENSE_KEY}
  #     KAFKA_PORT: ${KAFKA_PORT}
  #     KAFKA_HOST: kafka
  #     KAFKA_LOG_TOPIC: ${KAFKA_LOG_TOPIC}
  #   ports:
  #     - "${GEN_HTTP_PORT}:${GEN_HTTP_PORT}"
  #   expose:
  #     - ${GEN_HTTP_PORT}

  mongodb:  
    image: mongo:latest  
    container_name: mongodb  
    ports:
      -  "${MONGO_PORT}:${MONGO_PORT}" 
    volumes:  
      - mongo_data:/data/db  
    environment:  
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}  
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}  

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${OUT_PG_PORT}:${PG_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOOKEEPER_PORT}"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:${KAFKA_LOC_PORT}
      KAFKA_LISTENERS: PLAINTEXT://:${KAFKA_PORT},PLAINTEXT_HOST://:${KAFKA_LOC_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "${KAFKA_LOG_TOPIC}:1:1"
    ports:
      - ${KAFKA_PORT}:${KAFKA_PORT}
    volumes:
      - ./kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:${KAFKA_UI_PORT}
    environment:
      SERVER_PORT: ${KAFKA_UI_PORT}
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_PORT}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_PORT}
    depends_on:
      - kafka

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local